import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import warnings
warnings.filterwarnings("ignore")
import plotly.graph_objs as go
import numpy as np
import gc

@st.cache_data(ttl=3600)
def calculate_basic_stats(products_df, ratings_df):
    stats = {
        'num_products': len(products_df),
        'num_categories': products_df['sub_category'].nunique(),
        'num_ratings': len(ratings_df),
        'num_users': ratings_df['user_id'].nunique()
    }
    return stats

@st.cache_data(ttl=3600)
def calculate_user_stats(ratings_df, products_df):
    try:
        # Merge with minimal columns
        eda_merged = ratings_df.merge(
            products_df[['product_id', 'price']],
            on='product_id',
            how='left'
        )
        
        stats = {
            'top_reviewer': ratings_df['user_id'].value_counts().idxmax(),
            'top_reviewer_count': ratings_df['user_id'].value_counts().max(),
            'top_spender': eda_merged.groupby('user_id')['price'].sum().idxmax(),
            'top_spend_amount': eda_merged.groupby('user_id')['price'].sum().max(),
            'top_five_star_user': ratings_df[ratings_df['rating'] == 5]['user_id'].value_counts().idxmax(),
            'top_five_star_count': ratings_df[ratings_df['rating'] == 5]['user_id'].value_counts().max()
        }
        
        del eda_merged
        gc.collect()
        
        return stats
    except Exception as e:
        st.error(f"Error calculating user statistics: {str(e)}")
        return None

def create_figure(func):
    """Decorator to handle figure creation and cleanup"""
    def wrapper(*args, **kwargs):
        try:
            fig = func(*args, **kwargs)
            st.pyplot(fig)
            plt.close(fig)
            gc.collect()
        except Exception as e:
            st.error(f"Error creating visualization: {str(e)}")
    return wrapper

@create_figure
def plot_price_distribution(products_df):
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.histplot(data=products_df, x='price', bins=50, ax=ax)
    ax.set_title('Ph√¢n b·ªë gi√° s·∫£n ph·∫©m')
    ax.set_xlabel('Gi√° (VNƒê)')
    ax.set_ylabel('S·ªë l∆∞·ª£ng')
    return fig

@create_figure
def plot_category_distribution(products_df):
    category_counts = products_df['sub_category'].value_counts().head(10)
    fig, ax = plt.subplots(figsize=(12, 6))
    category_counts.plot(kind='bar', ax=ax)
    ax.set_title('Top 10 danh m·ª•c s·∫£n ph·∫©m')
    ax.set_xlabel('Danh m·ª•c')
    ax.set_ylabel('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    return fig

def data_insight(products_df, ratings_df):
    if products_df is None or ratings_df is None:
        st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.")
        return

    try:
        st.title("üìä Kh√°m ph√° d·ªØ li·ªáu")
        
        # Basic Statistics
        stats = {
            'num_products': len(products_df),
            'num_categories': products_df['sub_category'].nunique(),
            'num_ratings': len(ratings_df),
            'num_users': ratings_df['user_id'].nunique()
        }
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("T·ªïng s·ªë s·∫£n ph·∫©m", f"{stats['num_products']:,}")
            st.metric("S·ªë danh m·ª•c con", f"{stats['num_categories']:,}")
        with col2:
            st.metric("T·ªïng s·ªë ƒë√°nh gi√°", f"{stats['num_ratings']:,}")
            st.metric("S·ªë ng∆∞·ªùi d√πng", f"{stats['num_users']:,}")

        # Sample data display
        st.markdown("### üõçÔ∏è D·ªØ li·ªáu s·∫£n ph·∫©m m·∫´u")
        st.dataframe(products_df.head(10))
        st.markdown("### ‚≠ê D·ªØ li·ªáu ƒë√°nh gi√° m·∫´u")
        st.dataframe(ratings_df.head(10))

        # Basic visualizations with error handling
        try:
            st.header("üìä Ph√¢n b·ªë gi√° s·∫£n ph·∫©m")
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.histplot(data=products_df, x='price', bins=50, ax=ax)
            ax.set_title('Ph√¢n b·ªë gi√° s·∫£n ph·∫©m')
            ax.set_xlabel('Gi√° (VNƒê)')
            ax.set_ylabel('S·ªë l∆∞·ª£ng')
            st.pyplot(fig)
            plt.close(fig)
            gc.collect()
        except Exception as e:
            st.warning("Kh√¥ng th·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªë gi√°.")

        try:
            st.header("üìä Top danh m·ª•c s·∫£n ph·∫©m")
            category_counts = products_df['sub_category'].value_counts().head(10)
            fig, ax = plt.subplots(figsize=(12, 6))
            category_counts.plot(kind='bar', ax=ax)
            plt.xticks(rotation=45, ha='right')
            plt.tight_layout()
            st.pyplot(fig)
            plt.close(fig)
            gc.collect()
        except Exception as e:
            st.warning("Kh√¥ng th·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì danh m·ª•c s·∫£n ph·∫©m.")

        try:
            st.header("üìä Ph√¢n b·ªë ƒë√°nh gi√°")
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.histplot(data=ratings_df, x='rating', bins=20, ax=ax)
            ax.set_title('Ph√¢n b·ªë ƒëi·ªÉm ƒë√°nh gi√°')
            ax.set_xlabel('ƒêi·ªÉm ƒë√°nh gi√°')
            ax.set_ylabel('S·ªë l∆∞·ª£ng')
            st.pyplot(fig)
            plt.close(fig)
            gc.collect()
        except Exception as e:
            st.warning("Kh√¥ng th·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªë ƒë√°nh gi√°.")

    except Exception as e:
        st.error("C√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch d·ªØ li·ªáu.")
        st.exception(e)
    finally:
        gc.collect()

@create_figure
def plot_description_distribution(products_df):
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.histplot(data=products_df, x='desc_len', bins=50, ax=ax)
    ax.set_title('Ph√¢n b·ªë ƒë·ªô d√†i m√¥ t·∫£ s·∫£n ph·∫©m')
    ax.set_xlabel('ƒê·ªô d√†i m√¥ t·∫£ (k√Ω t·ª±)')
    ax.set_ylabel('S·ªë l∆∞·ª£ng')
    return fig

@create_figure
def plot_rating_distribution(ratings_df):
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.histplot(data=ratings_df, x='rating', bins=20, ax=ax)
    ax.set_title('Ph√¢n b·ªë ƒëi·ªÉm ƒë√°nh gi√°')
    ax.set_xlabel('ƒêi·ªÉm ƒë√°nh gi√°')
    ax.set_ylabel('S·ªë l∆∞·ª£ng')
    return fig

def display_user_stats(stats):
    st.header("üë• Th·ªëng k√™ ng∆∞·ªùi d√πng")
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("Ng∆∞·ªùi d√πng ƒë√°nh gi√° nhi·ªÅu nh·∫•t", 
                 f"User {stats['top_reviewer']}", 
                 f"{stats['top_reviewer_count']} ƒë√°nh gi√°")
        st.metric("Ng∆∞·ªùi d√πng chi ti√™u nhi·ªÅu nh·∫•t",
                 f"User {stats['top_spender']}", 
                 f"{stats['top_spend_amount']:,.0f} VNƒê")
                 
    with col2:
        st.metric("Ng∆∞·ªùi d√πng ƒë√°nh gi√° 5 sao nhi·ªÅu nh·∫•t",
                 f"User {stats['top_five_star_user']}", 
                 f"{stats['top_five_star_count']} ƒë√°nh gi√°")

    st.image("images/insight.jpeg", width=1000)
    st.title("M·ªôt s·ªë th√¥ng tin v·ªÅ d·ªØ li·ªáu")

    st.markdown("### üõçÔ∏è D·ªØ li·ªáu s·∫£n ph·∫©m")
    st.dataframe(products_df.head(10))
    st.markdown("### ‚≠ê D·ªØ li·ªáu ƒë√°nh gi√° s·∫£n ph·∫©m")
    st.dataframe(ratings_df.head(10))

    
    # T√≠nh c√°c ch·ªâ s·ªë
    num_products = products_df['product_id'].nunique()
    num_users = ratings_df['user_id'].nunique()
    num_ratings = ratings_df.shape[0]
    
    # Merge ƒë·ªÉ l·∫•y th√¥ng tin price, product_name
    eda_merged = ratings_df.merge(products_df[['product_id', 'price', 'product_name']], on='product_id', how='left')

    # User ƒë√°nh gi√° nhi·ªÅu nh·∫•t
    top_reviewer = ratings_df['user_id'].value_counts().idxmax()
    top_reviewer_count = ratings_df['user_id'].value_counts().max()

    # User chi ti√™u nhi·ªÅu nh·∫•t
    user_spend = eda_merged.groupby('user_id')['price'].sum()
    top_spender = user_spend.idxmax()
    top_spend_amount = user_spend.max()

    # User rating 5 sao nhi·ªÅu nh·∫•t
    one_star_users = ratings_df[ratings_df['rating'] == 5]['user_id'].value_counts()
    top_one_star_user = one_star_users.idxmax()
    top_one_star_count = one_star_users.max()

    # S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t (nhi·ªÅu ƒë√°nh gi√° nh·∫•t)
    top_product_id = ratings_df['product_id'].value_counts().idxmax()
    top_product_name = products_df.loc[products_df['product_id'] == top_product_id, 'product_name'].values[0]

    # S·∫£n ph·∫©m b√°n √≠t nh·∫•t (√≠t ƒë√°nh gi√° nh·∫•t)
    least_product_id = ratings_df['product_id'].value_counts().idxmin()
    least_product_name = products_df.loc[products_df['product_id'] == least_product_id, 'product_name'].values[0]

    col1, col2, col3 = st.columns(3)

    # ---------- C·ªòT 1: TH·ªêNG K√ä CHUNG ----------
    with col1:
        st.markdown("### üìä Th·ªëng k√™ t·ªïng quan")
        st.markdown(f"üõçÔ∏è **S·ªë s·∫£n ph·∫©m:**<br><span style='font-size:16px'>{num_products}</span>", unsafe_allow_html=True)
        st.markdown(f"üë§ **S·ªë ng∆∞·ªùi d√πng:**<br><span style='font-size:16px'>{num_users}</span>", unsafe_allow_html=True)
        st.markdown(f"‚≠ê **S·ªë l∆∞·ª£t ƒë√°nh gi√°:**<br><span style='font-size:16px'>{num_ratings}</span>", unsafe_allow_html=True)

    # ---------- C·ªòT 2: USER ----------
    with col2:
        st.markdown("### üôã‚Äç‚ôÇÔ∏è Ng∆∞·ªùi d√πng n·ªïi b·∫≠t")
        st.markdown(f"‚úçÔ∏è **Review nhi·ªÅu nh·∫•t:**<br><span style='font-size:15px'>{top_reviewer} ({top_reviewer_count} l·∫ßn)</span>", unsafe_allow_html=True)
        st.markdown(f"üí∞ **Chi ti√™u nhi·ªÅu nh·∫•t:**<br><span style='font-size:15px'>{top_spender} ({top_spend_amount:,.0f} VNƒê)</span>", unsafe_allow_html=True)
        st.markdown(f"üòç **Rating 5‚≠ê nhi·ªÅu nh·∫•t:**<br><span style='font-size:15px'>{top_one_star_user} ({top_one_star_count} l·∫ßn)</span>", unsafe_allow_html=True)

    # ---------- C·ªòT 3: S·∫¢N PH·∫®M ----------
    with col3:
        st.markdown("### üì¶ S·∫£n ph·∫©m n·ªïi b·∫≠t")
        st.markdown(f"üî• **Nhi·ªÅu ƒë√°nh gi√° nh·∫•t:**<br><span style='font-size:15px'>{top_product_name[:30]}...</span>", unsafe_allow_html=True)
        st.markdown(f"ü•∂ **√çt ƒë√°nh gi√° nh·∫•t:**<br><span style='font-size:15px'>{least_product_name[:30]}...</span>", unsafe_allow_html=True)


    # T√≠nh top nh√≥m h√†ng ph·ªï bi·∫øn
    top_subcat = products_df['sub_category'].value_counts().head(10)
    # Ti√™u ƒë·ªÅ
    st.subheader("üì¶ Top 10 Nh√≥m H√†ng Ph·ªï Bi·∫øn Nh·∫•t")

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.barplot(
        x=top_subcat.values,
        y=top_subcat.index,
        palette="Blues_d",
        ax=ax
    )
    ax.set_title("Top 10 nh√≥m h√†ng ph·ªï bi·∫øn")
    ax.set_xlabel("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m")
    ax.set_ylabel("Nh√≥m h√†ng")
    plt.tight_layout()

    # Hi·ªÉn th·ªã trong Streamlit
    st.pyplot(fig)
    
    # T√≠nh top 20 t√™n s·∫£n ph·∫©m l·∫∑p l·∫°i nhi·ªÅu nh·∫•t
    top_names = products_df['product_name'].value_counts().head(20)

    # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
    st.subheader("üõçÔ∏è Top 20 T√™n S·∫£n Ph·∫©m Ph·ªï Bi·∫øn Nh·∫•t")

    # V·∫Ω bi·ªÉu ƒë·ªì v·ªõi m√†u
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(
        x=top_names.values,
        y=top_names.index,
        palette="viridis",
        ax=ax
    )
    ax.set_title("Top 20 t√™n s·∫£n ph·∫©m ph·ªï bi·∫øn nh·∫•t")
    ax.set_xlabel("S·ªë l·∫ßn xu·∫•t hi·ªán")
    ax.set_ylabel("T√™n s·∫£n ph·∫©m")
    plt.tight_layout()

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)
    
    st.subheader("üéª Ph√¢n b·ªë gi√° theo nh√≥m s·∫£n ph·∫©m")

    # V·∫Ω bi·ªÉu ƒë·ªì violin
    fig, ax = plt.subplots(figsize=(12, 6))
    sns.violinplot(
        data=products_df,
        x='sub_category',
        y='price',
        inner='quartile',
        palette='pastel',
        ax=ax
    )

    # T√πy ch·ªânh tr·ª•c
    ax.set_title("Ph√¢n b·ªë gi√° theo nh√≥m s·∫£n ph·∫©m (Violin Plot)")
    ax.set_xlabel("Nh√≥m s·∫£n ph·∫©m")
    ax.set_ylabel("Gi√° (VNƒê)")
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()

    # Hi·ªÉn th·ªã trong Streamlit
    st.pyplot(fig)
    
    st.subheader("üì¶ Ph√¢n b·ªë Rating theo Nh√≥m S·∫£n Ph·∫©m")

    # V·∫Ω bi·ªÉu ƒë·ªì boxplot
    fig, ax = plt.subplots(figsize=(12, 6))
    sns.boxplot(
        data=products_df,
        x='sub_category',
        y='rating',
        palette='Set3',
        ax=ax
    )

    # T√πy ch·ªânh tr·ª•c
    ax.set_title("Ph√¢n b·ªë rating theo t·ª´ng nh√≥m s·∫£n ph·∫©m")
    ax.set_xlabel("Nh√≥m s·∫£n ph·∫©m")
    ax.set_ylabel("Rating")
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()

    # Hi·ªÉn th·ªã trong Streamlit
    st.pyplot(fig)
    
    st.subheader("üìà T∆∞∆°ng Quan gi·ªØa Gi√° v√† Rating theo Nh√≥m S·∫£n Ph·∫©m")

    # V·∫Ω bi·ªÉu ƒë·ªì scatter plot
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.scatterplot(
        data=products_df,
        x='rating',
        y='price',
        hue='sub_category',
        alpha=0.7,
        palette='tab10',
        ax=ax
    )

    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax.set_title("T∆∞∆°ng quan gi·ªØa gi√° v√† rating theo nh√≥m s·∫£n ph·∫©m")
    ax.set_xlabel("Rating")
    ax.set_ylabel("Gi√° s·∫£n ph·∫©m (VNƒê)")
    ax.legend(title='Nh√≥m s·∫£n ph·∫©m', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)
    
    # T√≠nh gi√° trung b√¨nh theo nh√≥m s·∫£n ph·∫©m
    avg_price = products_df.groupby('sub_category')['price'].mean().sort_values()

    # Ti√™u ƒë·ªÅ
    st.subheader("üí∞ Gi√° Trung B√¨nh Theo Nh√≥m S·∫£n Ph·∫©m")

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.barplot(
        x=avg_price.values,
        y=avg_price.index,
        palette='viridis',
        ax=ax
    )
    ax.set_title("Gi√° trung b√¨nh theo nh√≥m s·∫£n ph·∫©m")
    ax.set_xlabel("Gi√° trung b√¨nh (VNƒê)")
    ax.set_ylabel("Nh√≥m s·∫£n ph·∫©m")
    plt.tight_layout()

    # Hi·ªÉn th·ªã trong Streamlit
    st.pyplot(fig)
    
    # T√≠nh rating trung b√¨nh theo nh√≥m s·∫£n ph·∫©m
    avg_rating = products_df.groupby('sub_category')['rating'].mean().sort_values()

    # Ti√™u ƒë·ªÅ
    st.subheader("‚≠ê Rating Trung B√¨nh Theo Nh√≥m S·∫£n Ph·∫©m")

    # V·∫Ω bi·ªÉu ƒë·ªì barplot
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.barplot(
        x=avg_rating.values,
        y=avg_rating.index,
        palette='magma',
        ax=ax
    )

    # T√πy ch·ªânh ti√™u ƒë·ªÅ v√† nh√£n
    ax.set_title("Rating trung b√¨nh theo nh√≥m s·∫£n ph·∫©m")
    ax.set_xlabel("Rating trung b√¨nh")
    ax.set_ylabel("Nh√≥m s·∫£n ph·∫©m")
    plt.tight_layout()

    # Hi·ªÉn th·ªã trong Streamlit
    st.pyplot(fig)

        
    # T√≠nh to√°n t·ª∑ l·ªá ƒë√°nh gi√°
    values = ratings_df.rating.value_counts()
    labels = values.index
    colors = ['red', 'blue', 'green', 'yellow', 'black']

    # T·∫°o pie chart
    trace = go.Pie(
        labels=labels,
        values=values,
        marker=dict(colors=colors)
    )

    # T·∫°o layout cho pie chart
    layout = go.Layout(
        title='Bi·ªÉu ƒë·ªì Ratings theo ph·∫ßn trƒÉm'
    )

    # T·∫°o figure v√† v·∫Ω bi·ªÉu ƒë·ªì
    fig = go.Figure(data=trace, layout=layout)

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.plotly_chart(fig)
    
    # L·ªçc c√°c s·∫£n ph·∫©m c√≥ rating = 5
    five_star_ratings = ratings_df[ratings_df['rating'] == 5]
    five_star_ratings = five_star_ratings.merge(products_df[['product_id', 'product_name', 'sub_category']], on='product_id', how='left')

    # Nh√≥m s·∫£n ph·∫©m v√† ƒë·∫øm s·ªë l·∫ßn ƒë√°nh gi√° 5 sao
    top_product = five_star_ratings['product_name'].value_counts().reset_index()
    top_product.columns = ['product_name', 'count']

    # S·∫Øp x·∫øp s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng rating 5 sao gi·∫£m d·∫ßn
    top_product = top_product.sort_values(by='count', ascending=False)

    # Ch·ªçn top N s·∫£n ph·∫©m c√≥ s·ªë l∆∞·ª£ng rating 5 sao nhi·ªÅu nh·∫•t (v√≠ d·ª• top 10)
    top_N_product = top_product.head(10)

    # Ti√™u ƒë·ªÅ cho ph·∫ßn trong Streamlit
    st.subheader("‚≠ê Top S·∫£n Ph·∫©m Nh·∫≠n ƒê∆∞·ª£c Nhi·ªÅu ƒê√°nh Gi√° 5 Sao")

    # V·∫Ω bi·ªÉu ƒë·ªì barplot
    fig, ax = plt.subplots(figsize=(15, 10))
    sns.barplot(
        data=top_N_product,
        x='count',
        y='product_name',
        palette='viridis',
        ax=ax
    )

    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax.set_xlabel('Count of 5-Star Ratings')
    ax.set_ylabel('Product Name')
    ax.set_title('Product with the Most 5-Star Ratings')

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    plt.tight_layout()
    st.pyplot(fig)
    
    # Nh√≥m theo sub_category v√† ƒë·∫øm s·ªë l·∫ßn ƒë√°nh gi√° 5 sao
    top_sub_category = five_star_ratings['sub_category'].value_counts().reset_index()
    top_sub_category.columns = ['sub_category', 'count']

    # S·∫Øp x·∫øp c√°c nh√≥m s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng rating 5 sao gi·∫£m d·∫ßn
    top_sub_category = top_sub_category.sort_values(by='count', ascending=False)

    # Ch·ªçn top N nh√≥m s·∫£n ph·∫©m c√≥ s·ªë l∆∞·ª£ng rating 5 sao nhi·ªÅu nh·∫•t (v√≠ d·ª• top 10)
    top_N_sub_category = top_sub_category.head(10)

    # Ti√™u ƒë·ªÅ cho ph·∫ßn trong Streamlit
    st.subheader("‚≠ê Top Nh√≥m S·∫£n Ph·∫©m Nh·∫≠n ƒê∆∞·ª£c Nhi·ªÅu ƒê√°nh Gi√° 5 Sao")

    # V·∫Ω bi·ªÉu ƒë·ªì barplot
    fig, ax = plt.subplots(figsize=(15, 10))
    sns.barplot(
        data=top_N_sub_category,
        x='count',
        y='sub_category',
        palette='viridis',
        ax=ax
    )

    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax.set_xlabel('Count of 5-Star Ratings')
    ax.set_ylabel('Sub Category')
    ax.set_title('Sub Category with the Most 5-Star Ratings')

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    plt.tight_layout()
    st.pyplot(fig)
    
    # L·ªçc c√°c s·∫£n ph·∫©m c√≥ rating = 1
    one_star_ratings = ratings_df[ratings_df['rating'] == 1]

    # K·∫øt h·ª£p d·ªØ li·ªáu t·ª´ eda_df v√† products_df ƒë·ªÉ c√≥ ƒë∆∞·ª£c product_name
    one_star_ratings = one_star_ratings.merge(products_df[['product_id', 'product_name']], on='product_id', how='left')

    # Nh√≥m s·∫£n ph·∫©m v√† ƒë·∫øm s·ªë l·∫ßn ƒë√°nh gi√° 1 sao
    top_product = one_star_ratings['product_name'].value_counts().reset_index()
    top_product.columns = ['product_name', 'count']

    # S·∫Øp x·∫øp s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng rating 1 sao gi·∫£m d·∫ßn
    top_product = top_product.sort_values(by='count', ascending=False)

    # Ch·ªçn top N s·∫£n ph·∫©m c√≥ s·ªë l∆∞·ª£ng rating 1 sao nhi·ªÅu nh·∫•t (v√≠ d·ª• top 10)
    top_N_product = top_product.head(10)

    # Ti√™u ƒë·ªÅ cho ph·∫ßn trong Streamlit
    st.subheader("‚ö†Ô∏è Top S·∫£n Ph·∫©m Nh·∫≠n ƒê∆∞·ª£c Nhi·ªÅu ƒê√°nh Gi√° 1 Sao")

    # V·∫Ω bi·ªÉu ƒë·ªì barplot
    fig, ax = plt.subplots(figsize=(15, 10))
    sns.barplot(
        data=top_N_product,
        x='count',
        y='product_name',
        palette='viridis',
        ax=ax
    )

    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax.set_xlabel('Count of 1-Star Ratings')
    ax.set_ylabel('Product Name')
    ax.set_title('Product with the Most 1-Star Ratings')

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    plt.tight_layout()
    st.pyplot(fig)
    
    st.subheader("üìä Ph√¢n b·ªë ƒë·ªô d√†i m√¥ t·∫£ s·∫£n ph·∫©m")

    fig, ax = plt.subplots(figsize=(8, 4))
    sns.histplot(products_df['desc_len'], bins=50, kde=True, ax=ax)
    ax.set_title("Ph√¢n b·ªë ƒë·ªô d√†i m√¥ t·∫£ s·∫£n ph·∫©m")
    ax.set_xlabel("S·ªë t·ª´")
    ax.set_ylabel("S·ªë s·∫£n ph·∫©m")
    plt.tight_layout()

    st.pyplot(fig)
    
    st.markdown("### ‚òÅÔ∏è Wordcloud m√¥ t·∫£ s·∫£n ph·∫©m")
    st.image("images/wordcloud.png", width=1000)